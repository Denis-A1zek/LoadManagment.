@using Sigida.LoadManagment.Services.Interfaces;
@using Sigida.LoadManagment.Shared.Models;

@inject IEmployeeService EmployeeService;

@if (Employees.Count != 0)
{
    <table class="table table-white">
        <thead>
            <tr>
                <th scope="col">#</th>
                <th scope="col">Сотрудник</th>
                <th scope="col">Должность</th>
                <th scope="col">Нагрузка</th>
                <th scope="col">Действие</th>
            </tr>
        </thead>
        <tbody class="table-group-divider">
            @foreach (var (employee, i) in Employees.Select((employee, i) => (employee, i)))
            {
                <tr>
                    <td scope="row">@i</td>
                    <td>@employee.FullName</td>
                    <td>@employee.PositionName</td>
                    <td>@employee.Load</td>
                    <td>
                        
                        <input type="button" class="btn btn-warning" value="Изменить" @onclick="OpenEditModal" />
                        <input type="button" class="btn btn-danger" value="Удалить" @onclick="async () => await DeleteAsync(employee)" />
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <h1 class="text-center">Список пуст</h1>   
}
<EditEmployeeModal IsOpenEditModal="_IsOpenEditModal" OnOpenCallback="OpenEditModal" />


@code {
    [Parameter]
    public List<EmployeeViewModel> Employees { get; set; } = new();

    private bool _IsOpenEditModal = false;

    private void OpenEditModal()
    {
        _IsOpenEditModal = true;
        StateHasChanged();
    }

    //[Parameter]
    //public EventCallback OnEmployeeEditCallback { get; set; }

    [Parameter]
    public EventCallback OnEmployeeDeleteCallback { get; set; }

    public async Task DeleteAsync(EmployeeViewModel employee)
    {
        var result = await EmployeeService.DeleteAsync(employee.Id);
        await OnEmployeeDeleteCallback.InvokeAsync();
    }   
}
